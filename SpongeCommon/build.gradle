// Gradle plugins
buildscript {
    repositories {
        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        // VanillaGradle contains a custom ForgeGradle extension for SpongeCommon (see below)
        classpath 'gradle.plugin.net.minecrell:vanillagradle:2.2-5'
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'gradle.plugin.net.minecrell:licenser:0.3'
        classpath 'gradle.plugin.org.spongepowered:spongegradle:0.8.1'
        classpath 'org.spongepowered:mixingradle:0.5-SNAPSHOT'
    }
}

// Create task to resolve SpongeAPI revision
apply from: 'api-revision.gradle'

// Apply shared ForgeGradle configuration
ext.common = project
apply from: 'gradle/minecraft.gradle'

// Inherit SpongeCommon version from SpongeAPI
ext {
    isSnapshot = api.version.contains('-SNAPSHOT')
    isImplRC = common.recommendedVersion.contains('-SNAPSHOT')
    trimmedApiVersion = api.version.toString().replace("-SNAPSHOT", "")
    apiSplitVersion = trimmedApiVersion.split("\\.")
    // This is to determine if the split api version has at the least a minimum version.
    apiMinor = apiSplitVersion.length > 1 ? apiSplitVersion[1] : (apiSplitVersion.length > 0 ? apiSplitVersion.last : '0')
    correctedMinorVersion = Math.max(Integer.parseInt(apiMinor) - 1, 0)
    // And then here, we determine if the api version still has a patch version, to just ignore it.
    apiReleaseVersion = apiSplitVersion.length > 2 ? apiSplitVersion[0] + '.' + apiSplitVersion[1] : trimmedApiVersion
    apiSuffix = isSnapshot ? ext.apiSplitVersion[0] + '.' + correctedMinorVersion : apiReleaseVersion
    fixedApiVersionWithDecreasedMinor = apiSplitVersion.length > 2 ? apiSplitVersion[0] + '.' + correctedMinorVersion + '.' + apiSplitVersion[2] : apiSplitVersion[0] + '.' + correctedMinorVersion
}
version = minecraftVersion + '-' + ext.apiSuffix + '.' + common.recommendedVersion

ext.apiVersion = isSnapshot ? ext.fixedApiVersionWithDecreasedMinor : ext.apiReleaseVersion


dependencies {
    compile(api) {
        exclude module: 'asm'
    }
    compile(testPlugins) {
        exclude module: 'spongeapi'
    }
    compile 'org.ow2.asm:asm-debug-all:5.2'
    compile('org.spongepowered:mixin:0.8') {
        exclude module: 'launchwrapper'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
    }

    // log4j2 slf4j implementation
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.1'

    // Database connectors
    compile 'com.zaxxer:HikariCP:2.6.3'
    runtime 'org.mariadb.jdbc:mariadb-java-client:2.0.3'
    compile 'com.h2database:h2:1.4.196'
    runtime 'org.xerial:sqlite-jdbc:3.20.0'

    forgeGradleMcDeps('net.minecraft:launchwrapper:1.11') {
        transitive = false
    }

    // Taken from https://stackoverflow.com/a/7969292
    testCompile api.sourceSets.test.output
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.whenConfigured {
                pom -> pom.dependencies.removeAll { it.groupId == 'org.spongepowered' && it.artifactId == 'testplugins' }
            }
        }
    }
}

// Include API dependencies in our POM
ext.shadedDevProject = api

test {
    systemProperty 'lwts.tweaker', 'org.spongepowered.common.launch.TestTweaker'
    // If we try to generate HTML reports, we end up trying to generate a report
    // for all of the catalog method subs-tests, which takes an incredibly long amount of time
    reports.html.enabled = false
}
