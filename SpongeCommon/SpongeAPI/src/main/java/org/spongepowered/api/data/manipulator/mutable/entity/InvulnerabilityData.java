/*
 * This file is part of SpongeAPI, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.api.data.manipulator.mutable.entity;

import org.spongepowered.api.data.key.Keys;
import org.spongepowered.api.data.manipulator.DataManipulator;
import org.spongepowered.api.data.manipulator.immutable.entity.ImmutableInvulnerabilityData;
import org.spongepowered.api.data.value.mutable.MutableBoundedValue;
import org.spongepowered.api.data.value.mutable.Value;
import org.spongepowered.api.entity.Entity;

/**
 * A {@link DataManipulator} for the invulnerability an {@link Entity} can have
 * such that any "damage" occurring while the {@link Entity} is "invulnerable"
 * will not actually "damage" the {@link Entity}.
 */
public interface InvulnerabilityData extends DataManipulator<InvulnerabilityData, ImmutableInvulnerabilityData> {

    /**
     * Gets the {@link MutableBoundedValue} for the amount of "ticks" of
     * "invulnerability" an entity has because of being hurt recently.
     *
     * @return The value for the amount of ticks of invulnerability
     * @see Keys#INVULNERABILITY_TICKS
     */
    MutableBoundedValue<Integer> invulnerableTicks();

    /**
     * Gets the boolean {@link Value} which represents if an entity is
     * invulnerable from most damage sources besides <b>besides</b> the void,
     * players in creative mode, and manual killing like the /kill command.
     *
     * <p>This does not cover creative mode, where players can also
     * be invulnerable.</p>
     *
     * @return The boolean value for whether or not the entity is invulnerable
     * @see Keys#INVULNERABLE
     */
    Value<Boolean> invulnerable();

}
