// Shared Gradle configuration for the Sponge implementation projects

ext.common = project(':SpongeCommon')

// Finish configuring SpongeCommon first
evaluationDependsOn common.path

// Apply shared ForgeGradle configuration
apply from: common.file('gradle/minecraft.gradle')

ext.apiSuffix = (api.version - '-SNAPSHOT') + '-BETA'

dependencies {
    compile common
    compile common.sourceSets.java6.output
    // This is provided at runtime for mixins to be able to perform class decompilation
    // of mixin post transacted methods.
    runtime "net.minecraftforge:forgeflower:1.5.380.23"
}

sourceSets {
    java6.compileClasspath += main.compileClasspath + main.output
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module("org.spongepowered:spongeapi") with project(":SpongeCommon:SpongeAPI")
        substitute module("org.spongepowered:spongecommon") with project(":SpongeCommon")
    }
}

// Include only asm-debug-all in the workspace
configurations.compile {
    exclude module: 'asm'
    exclude module: 'asm-commons'
    exclude module: 'asm-tree'
}

// Add Common access transformers
minecraft {
    atSource common.sourceSets.main
}

// Generate mcmod.info file for implementation
apply plugin: 'org.spongepowered.meta'

generateMetadata {
    dependsOn common.resolveApiRevision
}
ext {
    implementationVersion = (common.isImplRC ? common.apiSuffix + '.' + common.recommendedVersion - '-SNAPSHOT' + "-RC$buildNumber" : common.apiSuffix + '.' + common.recommendedVersion)
}
sponge {
    plugin {
        id = project.ext.implementationId
        version = project.version
        meta {
            inherit project
        }
        meta.dependencies {
            spongeapi {
                forceVersion {common.apiVersion}
            }
            sponge {
                forceVersion {common.version}
            }
            minecraft {
                forceVersion project.minecraft.version
            }
        }
    }

    plugins {
        spongeapi {
            meta {
                inherit api
                version = {common.apiVersion}
            }
        }
        sponge {
            meta {
                inherit common
                name = "Sponge"
                version = common.version
                dependencies {
                    spongeapi {
                        forceVersion {common.apiVersion}
                    }
                    minecraft {
                        forceVersion project.minecraft.version
                    }
                }
            }
        }
    }
}

jar {
    classifier = 'base'
}

// Apply shadow plugin to include the dependencies in the JAR
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    // Clear the current source set
    // TODO: Find a better way for this, will likely break in the future
    mainSpec.sourcePaths.clear()

    // Make sure SpongeCommon was actually reobfuscated before shading it
    dependsOn reobfJar
    dependsOn common.tasks.reobfJar

    classifier = ''

    // Wait for reobf task to be fully configured
    afterEvaluate {
        // Include obfuscated classes
        from zipTree(reobfJar.jar)
    }
}

shadowJar ext.shadowConfiguration = {
    dependencies {
        // SpongeCommon and Mixin
        include project(common.path)
        include dependency('org.spongepowered:mixin')

        // SpongeAPI and event generation
        include project(api.path)
        include dependency('org.spongepowered:event-gen-core')

        // We need to exclude the test plugins
        exclude project(testPlugins.path)
        //exclude project(testmods.path)

        include dependency('org.spongepowered:plugin-meta')

        // Include all other dependencies
        include dependency('org.slf4j:slf4j-api')
        include dependency('org.apache.logging.log4j:log4j-slf4j-impl')

        include dependency('com.google.inject:guice')
        include dependency('javax.inject:javax.inject')
        include dependency('aopalliance:aopalliance')

        include dependency('com.flowpowered:flow-math')
        include dependency('com.flowpowered:flow-noise')

        include dependency('org.spongepowered:configurate-core')
        include dependency('org.spongepowered:configurate-hocon')
        include dependency('org.spongepowered:configurate-gson')
        include dependency('org.spongepowered:configurate-yaml')

        include dependency('org.yaml:snakeyaml')

        include dependency('com.zaxxer:HikariCP')

        include dependency('org.mariadb.jdbc:mariadb-java-client')
        include dependency('com.h2database:h2')
        include dependency('org.xerial:sqlite-jdbc')

        include dependency('com.github.ben-manes.caffeine:caffeine')
        include dependency('com.github.ben-manes.caffeine:guava')
    }

    // Exclude ForgeGradle classes from shaded JAR
    exclude 'dummyThing'
    exclude 'Version.java.template'

    // Prevent other dependencies replacing our license file
    exclude 'LICENSE', 'NOTICE'

    // We include multiple JDBC drivers, so we need to merge the service file to enable them all
    mergeServiceFiles()
}

artifacts {
    archives shadowJar
}

sourceJar {
    // Include SpongeCommon sources
    from common.sourceSets.main.allSource
    from common.sourceSets.java6.allSource
}

devJar {
    // Include SpongeCommon
    from common.sourceSets.main.output
    from common.sourceSets.java6.output
}

// Include SpongeCommon dependencies in our POM
ext.shadedDevProject = common

// Eclipse is too stupid to order the classpath correctly unfortunately...
// Put SpongeAPI and SpongeCommon last
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                def libs = classpath.entries.findAll { it.path.endsWith('SpongeCommon') || it.path.endsWith('SpongeAPI') }
                def others = classpath.entries - libs
                others.removeAll { it.path.contains('SpongeCommon') && it.path.contains('java6') }
                classpath.entries = others + libs
            }
        }
    }
}
